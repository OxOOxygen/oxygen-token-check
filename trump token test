// SPDX-License-Identifier: MIT

pragma solidity ^0.8.22;



contract trumpToken {
    address public owner;
    mapping(address => uint256) public balances;

    event Minted(address account, uint256 amt);
    event Burned(address account, uint256 amt);

    constructor() {
        owner = msg.sender;
        
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Access to only  if you are whitelisted");
        _;
    }

    function mint(uint256 amt) external onlyOwner {
        require(amt > 0, "To mint amount should be greater then 0");
        balances[msg.sender] += amt;
        emit Minted(msg.sender, amt);
    }
    
     function getBalance() external view returns (uint256) {
        return balances[msg.sender];
    }

    function burn(uint256 amt) external {
        require(balances[msg.sender] >= amt, "Not enough tokens to burn");
        balances[msg.sender] -= amt;
        emit Burned(msg.sender, amt);
    }

   
}
